pipeline{
    agent any

    stages{
        stage('Build'){
            steps{
                echo "Build Stage....."
                script {
                    // Build code using Maven
                    sh 'mvn clean package'
                }
                
            }
        }
        stage('Unit and Integration Tests'){
            steps{
                echo "Unit and Integration Testing..."
                script {
                    // Run unit tests using JUnit
                    sh 'mvn test'
                    
                    // Run integration tests using TestNG
                    sh 'mvn integration-test'
                }
                
            }
        }
        stage('Code Analysis'){
            steps{
                echo "Check the quality of the code"
                script {
                    // Integrate SonarQube analysis
                    withSonarQubeEnv('SonarQubeServer') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Security Scan'){
            steps{
                echo "Security Scan...."
                script {
                    try{
                        // Run security scans using OWASP ZAP
                        sh 'owasp-zap scan -t http://your-app-url'
                        currentBuild.result = 'Successful'
                    }
                    catch (Exception Exception){
                        currentBuild.result = 'Failed'
                        throw Exception
                    }
                }
            }
            post{
                always{
                    mail to: "hudaabbasi71@gmail.com",
                    subject: "Pipeline Build update",
                    body: "Pipeline Result: ${currentBuild.result}"
                    attachLog: true
                }
                
            }
        }
        stage('Deploy to Staging'){
            steps{
                echo "Deployed to staging"
                script {
                    // Use AWS CodeDeploy to deploy to staging environment
                    sh 'aws deploy create-deployment --application-name YourApp --deployment-group-name StagingGroup --s3-location s3://your-bucket/your-artifact'
                }
            }
        }
        stage('Integration Tests on Staging'){
            steps{
                echo "Running Integration Tests on Staging"
                script {
                    try{
                        // Run integration tests on the staging environment
                        sh 'mvn integration-test -Denv=staging'
                        currentTest.result = 'SUCCESSFUL'
                    }
                    catch (Exception Exception){
                        currentTest.result = 'FAILED'
                        throw Exception
                    }
                    
                }
            post{
                always{
                    mail to: "hudaabbasi71@gmail.com",
                    subject: "Pipeline Test update",
                    body: "Pipeline Result: ${currentTest.result}"
                    attachLog: true
                }
                
            }
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploy to Production"
                script {
                    // Use AWS CodeDeploy to deploy to production environment
                    sh 'aws deploy create-deployment --application-name YourApp --deployment-group-name ProductionGroup --s3-location s3://your-bucket/your-artifact'
                }
            }
        }
    }
    
}
